* Inbox
** [2022-04-14 Чт 09:48] To use our new class, we only need to modify the calling code
using MyProject =
    Project<FrontEndDeveloper, MiddlewareDeveloper, BackEndDeveloper>;

[[file:~/repo/Software-Architecture-with-Cpp/Chapter01/cc/coupling/loose.cpp::using MyProject =
 Project<FrontEndDeveloper, MiddlewareDeveloper, BackEndDeveloper>;]]
** [2022-04-14 Чт 09:46] When we added this no changes to the Peoject class were required, so now the classes are loosely couled. All we needed to do was to add the MiddlewareDeveloper class.Structuring our code this way allows for smaller rebuilds , faster development, and easier testing, all with less code that's easier to maintain.
class MiddlewareDeveloper {
 public:
  void develop() { developMiddleware(); }

 private:
  void developMiddleware() {}
};

[[file:~/repo/Software-Architecture-with-Cpp/Chapter01/cc/coupling/loose.cpp::class MiddlewareDeveloper {
 public:
 void develop() { developMiddleware(); }

 private:
 void developMiddleware() {}
};]]
** [2022-04-14 Чт 09:42] look very carefully at this template at learn from it against tight.cpp example.
template <typename... Devs>

[[file:~/repo/Software-Architecture-with-Cpp/Chapter01/cc/coupling/loose.cpp::template <typename... Devs>]]
** [2022-04-14 Чт 08:55] what does this stroke means ???
template <typename... Devs>

[[file:~/repo/Software-Architecture-with-Cpp/Chapter01/cc/coupling/loose.cpp::template <typename... Devs>]]
** [2022-04-13 Ср 15:03] look like the cstring wrapper
std::string_view str
[[file:~/repo/Software-Architecture-with-Cpp/Chapter01/philosophy/algorithms/good_dots.cpp::std::string_view str]]
